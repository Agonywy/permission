所有的修改功能的实现：先通过id去查询相关信息,存放到model中,转发到修改页面进行修改操作,修改完成之后重新加载页面展示出来

角色关联权限这部分主要涉及两部分开发工作
第一部分是动态树结构的开发，第二部分就是权限的开发工作
1.动态树结构是通过Node类来表示树节点,然后写了一个TreeBuilder工具类来构建JSON树形结构
Node类中最重要的两个属性是children和checked,children表示当前树节点下面的子节点,是一个list
checked的含义就是当前结点是否被选中,是一个Boolean值
TreeBuilder这个工具类的主要目的是将node列表构建成json形式的树结构返回。TreeBuilder中主要做了三件事,第一就是结点集合遍历,判断是不是根节点,如果当前结点id与父级id相同
那么说明这个结点是一个根节点,就把他放入根节点list中,第二件事就是构建属性结构,对根节点list进行遍历,依次构建子节点
同样判断当前节点的id与其他节点的父接ID是否相同,如果相同,添加到子节点列表中去,然后对子节点列表遍历,通过递归的方式递归子节点
这样构建出所有节点的子节点,然后添加根节点,就这样构建出树形结构；第三件事就是JSon.toJsonString,将树形结构以Json形式返回

2.权限的开发工作
前台监听操作栏实现打开form,content: 'addPerm?id='+data.id //设置当前角色的权限信息
发送请求,后台跳转到addPram.html页面
(1)首先就是需要从后台中获取树结构的数据信息来展示,因为每个角色都有自己已经拥有的权限,所以还要把我们当前的角色已经关联的权限给默认展示
因为是角色关联权限的因为是角色关联权限的,所以我通过引入jQuery的方式去获取角色ID,然后使用Ajax发送请求去获取树结构上需要展示的菜单信息
因为需要等待服务器返回信息才能继续操作,所以这里需要发送一个同步请求,我试了如果发送异步请求就会失败
(1.1)
后台获取树状结构的数据这里,先查询到所有的菜单相关信息给他封装成node节点列表，然后通过角色ID查询到当前角色关联的菜单
对node列表遍历,如果角色关联的菜单id和node列表中的nodeId相等,就将checked属性设置为true,这样来表示当前菜单权限是角色关联的权限
最后通过treeBuilder工具类将node列表封装成一个树状json返回在前台展示
(2)我们选中相关权限进行权限设置之后需要再次发起请求,后台处理设置相关权限
当我们点击设置权限的时候,我们拿到的是所有选中记录的信息,有他的id,存放子节点信息的list等等信息
我们在前台获取id,可能就有多个id,这里就是在监听按钮事件中写了一个函数去对数据列表进行遍历,获取选中的权限节点id信息,
也是通过递归的方式,如果当前节点含有子节点的话,就递归的调用这个方法,最后拿到所有选中的节点id,放到一个数组中返回
因为权限是关联角色的嘛,最开始就把角色id放在了隐藏域中,这里还是通过jQuery去拿到角色id,然后向后台发送请求实现修改权限的功能
(2.1)后台中我们为角色关联权限的时候,分为两步进行,第一步是先根据角色id删除掉他原来的关联关系
第二步我是把通过角色id和菜单权限id数组进行遍历,封装成RoleMenu对象,然后放到list中,将list传给service去
对角色批量的进行权限关联,在mapper中通过forEach完成角色权限关联的批量操作,每一条记录恰好就是roleId和menuId
这样就将这些信息添加到RoleMenu关联表中

(3)亮点
功能需求:我们需要先删除该角色关联的菜单权限,然后加入我们新的关联关系
这里的删除和新增是一个整体,要么全部都成功,要么全部都不成功,所以还需要加入事务管理
就要在springboot中开启事务管理,在相关方法上加上事务注解