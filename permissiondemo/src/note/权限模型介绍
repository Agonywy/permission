权限模型：迄今为止最为普及的权限设计模型是RBAC模型，基于角色的访问控制
RBAC:(Role-Base Access Control)

在传统的权限模型中,我们直接把权限赋予用户,而在RBAC中,增加了角色的概念
我们首先把权限赋予角色，再把角色赋予用户，这样由于增加了角色，授权会更加
灵活方便而在RBAC中根据权限的复杂程度，又可分为RBAC0，RBAC1，RBAC2,RBAC3,
其中RBAC0是基础,RBAC1,2,3都是以RBAC0为基础升级的，我们可以更具自家产品权限
的复杂程度，选取合适的权限模型

1.1.1基本模型-RBAC0
RBAC模型中，我们把权限赋予角色再把角色赋予权限，用户和角色之间是多对多的关系
角色与权限之间也是多对多的关系，一个用户可以有一个或多个角色,一个角色也可以有
一个或多个权限

用户是发起操作的主体，按类型可以分为2B,和2C用户，可以是后台管理系统的用户，可以是OA
系统的内部员工也可以是面向C(Client)端的用户，比如阿里云的用户

角色是起到了桥梁的作用，链接了用户和权限的关系，每个角色关联多个权限，同时一个
用户关联多个角色，那么这个用户就有了多个角色的多个权限

1.1.2角色分层模型-RBAC1
RBAC1建立在RBAC0基础之上，在角色中引入了继承的概念，简单理解就是，给角色可以分成
几个等级，每个等级权限不同，从而实现了更细粒度的权限管理

1.1.3角色限制模型-RBAC2
RBAC2同样建立在RBAC0基础之上，仅是对用户，角色和权限三者之间增加了一些限制
这些限制可以分为两类,即静态职责分离SSD和动态职责分离DSD
(1)限制一：静态职责分离
互斥角色限制：同一个用户在两个互斥角色中只能选择一个
基数限制：一个用户拥有的角色是有限的，一个角色拥有的权限也是有限的
先决条件限制：用户想要获得更高级的角色，首先必须拥有低级角色
(2)限制二：动态职责分离
动态的限制用户以及其拥有的角色：如一个用户可以拥有两个角色，但是运行时只能激活一个角色

举例：譬如给一个用户分配了销售经理的角色，就不能在给他赋予财务经理的角色了
否则他既可以录入合同又能自己审核合同
再例如有些公司对角色的升级十分看重，一个销售员向升级到销售经理，必须先升级到
销售主管，这时候就要采用先决条件了

1.1.4统一模型-RBAC3
RBAC3是RBAC1和RBAC2的合集，所以RBAC3既有角色分层，又可以增加各种限制
RBAC3 = RBAC1+RBAC2

1.1.5基于RBAC的扩展-用户组
基于RBAC模型，还可以适当延展，使其更适合我们的产品，譬如用户组概念，直接给用户组
分配角色，再把用户加入用户组,这样用户除了拥有自身的权限外，还拥有了所属用户组的
所有权限
举例：我们可以把一个部门看作一个用户组，比如销售组，财务部，再给这个部门直接赋予角色
使部门拥有权限，这样这个部门的所有用户都有了部门权限，用户组概念可以更方便的
给群体用户授权，且不影响用户本来就拥有的角色权限

总结：权限系统可以说是整个系统中最基础，同时也可以很复杂的，在实际项目中，会遇到
多个系统，多个用户类型，多个使用场景，这就需要具体问题具体分析，但最核心的RBAC莫i选哪个
是不变的，我们可以在其基础上进行扩展来满足需求